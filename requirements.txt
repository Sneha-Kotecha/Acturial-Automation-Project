# ================================
# ACTUARIAL AUTOMATION PLATFORM
# Requirements and Setup Instructions
# ================================

# REQUIREMENTS.TXT
# ----------------

# Core Framework
fastapi==0.104.1
uvicorn[standard]==0.24.0
pydantic==2.5.0

# Data Processing
pandas==2.1.3
numpy==1.25.2
scipy==1.11.4

# Actuarial Libraries
lifelines==0.27.8
pyliferisk==1.12

# Machine Learning
scikit-learn==1.3.2
xgboost==2.0.2
lightgbm==4.1.0

# Statistical Analysis
statsmodels==0.14.0
arch==6.2.0

# Visualization
matplotlib==3.8.2
seaborn==0.13.0
plotly==5.17.0
dash==2.14.2

# Workflow Orchestration
prefect==2.14.9
celery==5.3.4

# Database
sqlalchemy==2.0.23
psycopg2-binary==2.9.9
redis==5.0.1
sqlite3

# Configuration
pyyaml==6.0.1
python-dotenv==1.0.0

# Utilities
python-dateutil==2.8.2
pytz==2023.3
requests==2.31.0
httpx==0.25.2

# Security
cryptography==41.0.8
passlib[bcrypt]==1.7.4
python-jose[cryptography]==3.3.0

# Testing
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-cov==4.1.0

# Linting and Formatting
black==23.11.0
flake8==6.1.0
mypy==1.7.1

# Documentation
sphinx==7.2.6
sphinx-rtd-theme==1.3.0

# Development
jupyter==1.0.0
ipython==8.17.2

# SETUP INSTRUCTIONS
# ------------------

# 1. ENVIRONMENT SETUP
# Create virtual environment:
python -m venv actuarial_env
source actuarial_env/bin/activate  # On Windows: actuarial_env\Scripts\activate

# Install requirements:
pip install -r requirements.txt

# 2. DATABASE SETUP
# PostgreSQL (recommended for production):
# - Install PostgreSQL
# - Create database: CREATE DATABASE actuarial_db;
# - Create user: CREATE USER actuarial_user WITH PASSWORD 'your_password';
# - Grant privileges: GRANT ALL PRIVILEGES ON DATABASE actuarial_db TO actuarial_user;

# SQLite (for development):
# - No additional setup required

# 3. REDIS SETUP (for caching)
# Install Redis:
# - Ubuntu: sudo apt-get install redis-server
# - macOS: brew install redis
# - Windows: Download from https://redis.io/download

# Start Redis:
redis-server

# 4. ENVIRONMENT VARIABLES
# Create .env file:
DB_PASSWORD=your_database_password
REDIS_PASSWORD=your_redis_password
API_SECRET_KEY=your_secret_key_here
PREFECT_API_URL=http://localhost:4200/api

# 5. DATA PREPARATION
# Create data directory structure:
mkdir -p data/{mortality_tables,members,assets,contributions}
mkdir -p logs
mkdir -p reports/{ias19,solvency_ii,tpr}
mkdir -p plots

# Sample mortality table (data/mortality_standard.csv):
# age,qx_male,qx_female
# 20,0.0001,0.0001
# 21,0.0001,0.0001
# ...

# Sample member data (data/members.csv):
# member_id,date_of_birth,gender,employment_date,salary,service_years,pension_type,status
# M001,1980-01-15,M,2005-03-01,50000,18.5,DB,active
# ...

# 6. INITIALIZE DATABASE
python -c "
from sqlalchemy import create_engine, MetaData
from actuarial_platform import create_tables
engine = create_engine('postgresql://actuarial_user:password@localhost/actuarial_db')
create_tables(engine)
print('Database initialized successfully')
"

# 7. START SERVICES

# Start Prefect server (in separate terminal):
prefect server start

# Start Redis (if not already running):
redis-server

# Start the application:
python actuarial_platform.py

# Access the dashboard:
# http://localhost:8000/dashboard (for the web interface)
# http://localhost:8000/docs (for API documentation)

# 8. DOCKER SETUP (Alternative)
# Create Dockerfile:

FROM python:3.11-slim

WORKDIR /app

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["uvicorn", "actuarial_platform:app", "--host", "0.0.0.0", "--port", "8000"]

# Docker Compose (docker-compose.yml):

version: '3.8'

services:
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DB_PASSWORD=postgres_password
      - REDIS_PASSWORD=redis_password
    depends_on:
      - db
      - redis
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs

  db:
    image: postgres:15
    environment:
      - POSTGRES_DB=actuarial_db
      - POSTGRES_USER=actuarial_user
      - POSTGRES_PASSWORD=postgres_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7-alpine
    command: redis-server --requirepass redis_password
    ports:
      - "6379:6379"

  prefect:
    image: prefecthq/prefect:2.14.9-python3.11
    command: prefect server start
    ports:
      - "4200:4200"
    environment:
      - PREFECT_API_URL=http://localhost:4200/api

volumes:
  postgres_data:

# Run with Docker:
# docker-compose up -d

# 9. TESTING
# Run tests:
pytest tests/ -v --cov=actuarial_platform

# Run specific test:
pytest tests/test_actuarial_engine.py::test_calculate_technical_provisions

# 10. PRODUCTION DEPLOYMENT

# Using Gunicorn:
pip install gunicorn
gunicorn actuarial_platform:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000

# Using systemd service (/etc/systemd/system/actuarial-platform.service):
[Unit]
Description=Actuarial Automation Platform
After=network.target

[Service]
Type=exec
User=actuarial
Group=actuarial
WorkingDirectory=/opt/actuarial-platform
Environment=PATH=/opt/actuarial-platform/venv/bin
ExecStart=/opt/actuarial-platform/venv/bin/gunicorn actuarial_platform:app -w 4 -k uvicorn.workers.UvicornWorker --bind 0.0.0.0:8000
Restart=always

[Install]
WantedBy=multi-user.target

# Enable and start service:
sudo systemctl enable actuarial-platform
sudo systemctl start actuarial-platform

# 11. MONITORING AND LOGGING

# Prometheus metrics endpoint: http://localhost:8000/metrics
# Health check endpoint: http://localhost:8000/health
# API documentation: http://localhost:8000/docs

# Log rotation (logrotate configuration):
/opt/actuarial-platform/logs/*.log {
    daily
    rotate 30
    compress
    delaycompress
    missingok
    notifempty
    sharedscripts
    postrotate
        systemctl reload actuarial-platform
    endscript
}

# 12. BACKUP AND RECOVERY

# Database backup:
pg_dump -U actuarial_user -h localhost actuarial_db > backup_$(date +%Y%m%d).sql

# Automated backup script:
#!/bin/bash
BACKUP_DIR="/opt/backups/actuarial"
DATE=$(date +%Y%m%d_%H%M%S)
pg_dump -U actuarial_user -h localhost actuarial_db | gzip > ${BACKUP_DIR}/actuarial_${DATE}.sql.gz
find ${BACKUP_DIR} -name "*.sql.gz" -mtime +30 -delete

# Add to crontab for daily backups:
0 2 * * * /opt/scripts/backup_actuarial.sh

# 13. SECURITY CONSIDERATIONS

# - Use strong passwords and rotate regularly
# - Enable SSL/TLS in production
# - Implement proper authentication and authorization
# - Regular security updates
# - Monitor access logs
# - Use encrypted database connections
# - Implement rate limiting
# - Regular vulnerability scans

# 14. PERFORMANCE OPTIMIZATION

# - Use database connection pooling
# - Implement Redis caching
# - Optimize database queries with indexes
# - Use async processing for heavy calculations
# - Monitor memory usage and optimize
# - Use CDN for static assets
# - Implement database partitioning for large datasets

# 15. TROUBLESHOOTING

# Common issues and solutions:

# Issue: Database connection error
# Solution: Check database credentials and connectivity

# Issue: Redis connection error  
# Solution: Ensure Redis server is running and accessible

# Issue: High memory usage
# Solution: Increase server memory or optimize calculations

# Issue: Slow calculations
# Solution: Use parallel processing and caching

# Issue: API timeout
# Solution: Increase timeout settings or optimize queries

# For support and documentation:
# - Check logs in /logs directory
# - Review API documentation at /docs
# - Check system status at /health
# - Monitor metrics at /metrics